# line comment

# Hello World example
print('Hello World')

Int nums # Initialize an Integer, must be assigned a value before it can be used

number = 23 # Type Inference

float_number=number+1.2 # Spaces are generally insignificant, but encouraged for readability

question = 'what\'s going on' # Escaping

Str something # Initialize a String

things = [1, 2, 3] # Array, homogeneous
other_things = (1, 'Hello') # List, non-homogeneous
stuff = {first_name: 'Samus', 'last_name': 'Aran'} # Dictionary, key strings don't have to be in quotes
Int[] other_stuff = [] # Empty Array of Ints

if number > 23
	print('number greater than 23')
else if number == 23
	print('equals 23')
else
	print('number greater than or equal to 23')

if something is not number \ # Continuing statement onto next line
		and true # Indentaion is with tabs only
	print('They are not the same')

for x in 0..40 # For loop using a range
	print(x * 2)

for item in things: # Iterate over objects
	print(item)

while number > 1
	number -= 1
	print(number)

if 2 in things
	print('yes')

if 2 not in things
	print('no')

num = 1

switch num # Switch soon to be replaced with Pattern Matching
	case 1
		print('I am One')
	case 2
		print('I am Two')
		break
	default
		print(num)
		print('I know not what I am')
	case 3
		print('I am Three')

# Proposed pattern matching scheme
s = 'hello
match s.contains
| 'hello'
	print('Greating')
| 'goodby'
	print('Farewell')

		# Function Return notation
def fib(Int n) -> Int
	a = 0
	b = 1
	for _ in 0..n
		prev_a = a
		a = b
		b = prev_a + b
	return a

def fib_rec(Int n) -> Int
	if n == 0
		return 0
	if n == 1
		return 1
	return fib_rec(n - 1) + fib_rec(n - 2)

# Assign anonymous function to a variable
myfunc = def (Int x, Int y) -> Int
	if x > y
		return x + y
	else
		return x * y

print(myfunc(2, 3))

# Type Aliasing
type FInt = Func[Int] -> Int
# All types (including structs and classes) should start with a capital

def do_stuff(Int x, FInt callback) -> Int
	x **= 2
	x = callback(x)
	return x

num = do_stuff(3,
	def (Int y) -> Int
		y += 7
		return y
)

print(
	num
)

# Closure
def start_at(Int x) -> FInt
	def increment_by(Int y) -> Int
		return x + y
	return increment_by

start_at_5 = start_at(5)
start_at_27 = start_at(27)

print(start_at_5(4))
print(start_at_27(15))

Int num = 1.0::Int # Casting a Decimal to Int

print(num)

# User input
Int age = input('How old are you?')

# String Interpolation
print('Wow! You are {age} years old?!')

Enum Genders(
	MALE,
	FEMALE,
	OTHER
)

Struct Circle
	Int radius
	Int x
	Int y

Circle cir = {radius=5, x=2, y=4}

print(cir.radius)

abstract class Vehicle
	# Constructor
	new(Str make, Int year, Str color)
		this.year = year
		this.make # Automtically assigns make from argument if they have the same name
		this._color = color
		Str this._fav_color

# Inheritance
class Car(Vehicle)
	new(Str make, Int year, color='green', hatchback=false)
		# Design by Contract
		require year < 10
		this.hatchback
		super.Vehicle(make, year, color)

	void print_year()
		print('This car was made in {this.year}')

class Person
	new(Str name, Int age)
		this.name
		this.age

frank = Person('Frank', 30)

print(frank.age)

garry = true
larry = false
num = 8

if not num == 7
	num += 2
else if garry
	num -= 1
else
	num *= 4

print(num)
print(garry)
print(larry)

def is_less_than_5(Int x) -> Bool
	if x >= 5
		return false
	else
		return true

print(is_less_than_5(3))
print(is_less_than_5(5))
print(is_less_than_5(7))

# Testing scope
def do_stuff(Int y) -> void
	print(y)

def square(Int x) -> Int
	do_stuff(x)
	return x ** 2

print(square(5))

def greet_name(Str name) -> void
	print('Hello ' + name)

greet_name('Anthony')

x = 0
while x < 10
	if x == 1
		break
	x += 1

switch x
	case 2
		print('x is Two')
		break

	case 1
		print('x is One')

	default
		print("Sorry, wasn't paying attention")

y = 10
for x in 0..y + 1
	print(x::Str + ' ' + fib(x)::Str)

things = [3, 2, 1]
print(things[1 + 1])

Dec a
b = 3

def bar() -> Int
	return 2 + 2

Bool larry = true
f = bar()
Float g = 7.5
h = 5
garry = false

if garry
	g = 2.6
	if larry and garry
		h += h
else if larry
	g = 3.6
else
	g = 7.6

if larry
	g += 7
first_name = 'Anthony'
last_name = 'Post\'s'
full_name = first_name + ' ' + last_name
a = 2 * g
d = 0
c = a::Int ** b

def foo(Int first, Int second) -> Int
	# Nested function
	def baz() -> Int
		return 54
	if first < second
		return first + second
	else
		return baz()

e = foo(c, b)

while b < 30
	b += c + 1
	if b >= 20
		b += 2
	else
		b += 1

d += c + b
